// THIS FILE IS GENERATED (see helper/)

#ifndef Q_CLASSES_H
#define Q_CLASSES_H

#include "_ini.h"
#include "../../ecl_fun.h"
#include "../_lobjects.h"
#include <QtWidgets>
#include <QtPrintSupport>

QT_BEGIN_NAMESPACE

class LAbstractSocket : public QAbstractSocket {
    Q_OBJECT
    friend class Q12;
public:
    LAbstractSocket(uint u, SocketType x1, QObject* x2) : QAbstractSocket(x1, x2), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void connectToHost(const QString& x1, quint16 x2, OpenMode x3 = ReadWrite, NetworkLayerProtocol x4 = AnyIPProtocol) { quint64 id = LObjects::override_id(unique, 117); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 117, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QAbstractSocket::connectToHost(x1, x2, x3, x4); }}
    void disconnectFromHost() { quint64 id = LObjects::override_id(unique, 119); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { callOverrideFun(fun, 119, 0, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QAbstractSocket::disconnectFromHost(); }}
    void resume() { quint64 id = LObjects::override_id(unique, 120); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { callOverrideFun(fun, 120, 0, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QAbstractSocket::resume(); }}
    void setReadBufferSize(qint64 x1) { quint64 id = LObjects::override_id(unique, 121); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 121, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QAbstractSocket::setReadBufferSize(x1); }}
    void setSocketOption(QAbstractSocket::SocketOption x1, const QVariant& x2) { quint64 id = LObjects::override_id(unique, 122); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 122, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QAbstractSocket::setSocketOption(x1, x2); }}
    QVariant socketOption(QAbstractSocket::SocketOption x1) { quint64 id = LObjects::override_id(unique, 123); void* fun = LObjects::overrideFun(id); QVariant ret; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 123, args, id).value<QVariant>(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::socketOption(x1); } return ret; }
    bool waitForConnected(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 124); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 124, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::waitForConnected(x1); } return ret; }
    bool waitForDisconnected(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 125); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 125, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::waitForDisconnected(x1); } return ret; }
    bool atEnd() const { quint64 id = LObjects::override_id(unique, 126); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 126, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::atEnd(); } return ret; }
    qlonglong bytesAvailable() const { quint64 id = LObjects::override_id(unique, 127); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 127, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::bytesAvailable(); } return ret; }
    qlonglong bytesToWrite() const { quint64 id = LObjects::override_id(unique, 128); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 128, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::bytesToWrite(); } return ret; }
    bool canReadLine() const { quint64 id = LObjects::override_id(unique, 129); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 129, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::canReadLine(); } return ret; }
    void close() { quint64 id = LObjects::override_id(unique, 130); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { callOverrideFun(fun, 130, 0, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QAbstractSocket::close(); }}
    bool isSequential() const { quint64 id = LObjects::override_id(unique, 131); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 131, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::isSequential(); } return ret; }
    bool waitForBytesWritten(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 132); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 132, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::waitForBytesWritten(x1); } return ret; }
    bool waitForReadyRead(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 133); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 133, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::waitForReadyRead(x1); } return ret; }
    qlonglong readData(char* x1, qint64 x2) { quint64 id = LObjects::override_id(unique, 134); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 134, args, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::readData(x1, x2); } return ret; }
    qlonglong readLineData(char* x1, qint64 x2) { quint64 id = LObjects::override_id(unique, 135); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 135, args, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::readLineData(x1, x2); } return ret; }
    qlonglong writeData(const char* x1, qint64 x2) { quint64 id = LObjects::override_id(unique, 136); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 136, args, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::writeData(x1, x2); } return ret; }
    bool open(OpenMode x1) { quint64 id = LObjects::override_id(unique, 137); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 137, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::open(x1); } return ret; }
    qlonglong pos() const { quint64 id = LObjects::override_id(unique, 138); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 138, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::pos(); } return ret; }
    bool reset() { quint64 id = LObjects::override_id(unique, 139); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 139, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::reset(); } return ret; }
    bool seek(qint64 x1) { quint64 id = LObjects::override_id(unique, 140); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 140, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::seek(x1); } return ret; }
    qlonglong size() const { quint64 id = LObjects::override_id(unique, 141); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 141, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::size(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { quint64 id = LObjects::override_id(unique, 5); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QAbstractSocket::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { quint64 id = LObjects::override_id(unique, 6); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QAbstractSocket::childEvent(x1); }}
    void customEvent(QEvent* x1) { quint64 id = LObjects::override_id(unique, 7); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QAbstractSocket::customEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { quint64 id = LObjects::override_id(unique, 8); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QAbstractSocket::timerEvent(x1); }}
};

class LLocalServer : public QLocalServer {
    Q_OBJECT
    friend class Q106;
public:
    LLocalServer(uint u, QObject* x1 = 0) : QLocalServer(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool hasPendingConnections() const { quint64 id = LObjects::override_id(unique, 278); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 278, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalServer::hasPendingConnections(); } return ret; }
    QLocalSocket* nextPendingConnection() { quint64 id = LObjects::override_id(unique, 279); void* fun = LObjects::overrideFun(id); QLocalSocket* ret = 0; if(fun && (LObjects::calling != id)) { ret = (QLocalSocket*)callOverrideFun(fun, 279, 0, id).value<void*>(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalServer::nextPendingConnection(); } return ret; }
    void incomingConnection(quintptr x1) { quint64 id = LObjects::override_id(unique, 280); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 280, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QLocalServer::incomingConnection(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { quint64 id = LObjects::override_id(unique, 5); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalServer::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { quint64 id = LObjects::override_id(unique, 6); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QLocalServer::childEvent(x1); }}
    void customEvent(QEvent* x1) { quint64 id = LObjects::override_id(unique, 7); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QLocalServer::customEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { quint64 id = LObjects::override_id(unique, 8); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QLocalServer::timerEvent(x1); }}
};

class LLocalSocket : public QLocalSocket {
    Q_OBJECT
    friend class Q107;
public:
    LLocalSocket(uint u, QObject* x1 = 0) : QLocalSocket(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    qlonglong bytesAvailable() const { quint64 id = LObjects::override_id(unique, 127); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 127, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::bytesAvailable(); } return ret; }
    qlonglong bytesToWrite() const { quint64 id = LObjects::override_id(unique, 128); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 128, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::bytesToWrite(); } return ret; }
    bool canReadLine() const { quint64 id = LObjects::override_id(unique, 129); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 129, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::canReadLine(); } return ret; }
    void close() { quint64 id = LObjects::override_id(unique, 130); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { callOverrideFun(fun, 130, 0, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QLocalSocket::close(); }}
    bool isSequential() const { quint64 id = LObjects::override_id(unique, 131); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 131, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::isSequential(); } return ret; }
    bool open(OpenMode x1 = ReadWrite) { quint64 id = LObjects::override_id(unique, 137); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 137, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::open(x1); } return ret; }
    bool waitForBytesWritten(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 132); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 132, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::waitForBytesWritten(x1); } return ret; }
    bool waitForReadyRead(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 133); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 133, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::waitForReadyRead(x1); } return ret; }
    qlonglong readData(char* x1, qint64 x2) { quint64 id = LObjects::override_id(unique, 134); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 134, args, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::readData(x1, x2); } return ret; }
    qlonglong writeData(const char* x1, qint64 x2) { quint64 id = LObjects::override_id(unique, 136); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 136, args, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::writeData(x1, x2); } return ret; }
    bool atEnd() const { quint64 id = LObjects::override_id(unique, 126); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 126, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::atEnd(); } return ret; }
    qlonglong pos() const { quint64 id = LObjects::override_id(unique, 138); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 138, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::pos(); } return ret; }
    bool reset() { quint64 id = LObjects::override_id(unique, 139); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 139, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::reset(); } return ret; }
    bool seek(qint64 x1) { quint64 id = LObjects::override_id(unique, 140); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 140, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::seek(x1); } return ret; }
    qlonglong size() const { quint64 id = LObjects::override_id(unique, 141); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 141, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::size(); } return ret; }
    qlonglong readLineData(char* x1, qint64 x2) { quint64 id = LObjects::override_id(unique, 135); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 135, args, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::readLineData(x1, x2); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { quint64 id = LObjects::override_id(unique, 5); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QLocalSocket::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { quint64 id = LObjects::override_id(unique, 6); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QLocalSocket::childEvent(x1); }}
    void customEvent(QEvent* x1) { quint64 id = LObjects::override_id(unique, 7); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QLocalSocket::customEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { quint64 id = LObjects::override_id(unique, 8); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QLocalSocket::timerEvent(x1); }}
};

class LNetworkAccessManager : public QNetworkAccessManager {
    Q_OBJECT
    friend class Q117;
public:
    LNetworkAccessManager(uint u, QObject* x1 = 0) : QNetworkAccessManager(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool eventFilter(QObject* x1, QEvent* x2) { quint64 id = LObjects::override_id(unique, 5); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkAccessManager::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { quint64 id = LObjects::override_id(unique, 6); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QNetworkAccessManager::childEvent(x1); }}
    void customEvent(QEvent* x1) { quint64 id = LObjects::override_id(unique, 7); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QNetworkAccessManager::customEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { quint64 id = LObjects::override_id(unique, 8); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QNetworkAccessManager::timerEvent(x1); }}
};

class LNetworkCookieJar : public QNetworkCookieJar {
    Q_OBJECT
    friend class Q118;
public:
    LNetworkCookieJar(uint u, QObject* x1 = 0) : QNetworkCookieJar(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    QList<QNetworkCookie> cookiesForUrl(const QUrl& x1) const { quint64 id = LObjects::override_id(unique, 285); void* fun = LObjects::overrideFun(id); QList<QNetworkCookie> ret; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 285, args, id).value<QList<QNetworkCookie> >(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkCookieJar::cookiesForUrl(x1); } return ret; }
    bool deleteCookie(const QNetworkCookie& x1) { quint64 id = LObjects::override_id(unique, 286); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 286, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkCookieJar::deleteCookie(x1); } return ret; }
    bool insertCookie(const QNetworkCookie& x1) { quint64 id = LObjects::override_id(unique, 287); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 287, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkCookieJar::insertCookie(x1); } return ret; }
    bool setCookiesFromUrl(const QList<QNetworkCookie>& x1, const QUrl& x2) { quint64 id = LObjects::override_id(unique, 288); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 288, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkCookieJar::setCookiesFromUrl(x1, x2); } return ret; }
    bool updateCookie(const QNetworkCookie& x1) { quint64 id = LObjects::override_id(unique, 289); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 289, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkCookieJar::updateCookie(x1); } return ret; }
    bool validateCookie(const QNetworkCookie& x1, const QUrl& x2) const { quint64 id = LObjects::override_id(unique, 290); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 290, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkCookieJar::validateCookie(x1, x2); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { quint64 id = LObjects::override_id(unique, 5); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkCookieJar::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { quint64 id = LObjects::override_id(unique, 6); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QNetworkCookieJar::childEvent(x1); }}
    void customEvent(QEvent* x1) { quint64 id = LObjects::override_id(unique, 7); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QNetworkCookieJar::customEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { quint64 id = LObjects::override_id(unique, 8); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QNetworkCookieJar::timerEvent(x1); }}
};

class LNetworkDiskCache : public QNetworkDiskCache {
    Q_OBJECT
    friend class Q119;
public:
    LNetworkDiskCache(uint u, QObject* x1 = 0) : QNetworkDiskCache(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    qlonglong expire() { quint64 id = LObjects::override_id(unique, 291); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 291, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkDiskCache::expire(); } return ret; }
    qlonglong cacheSize() const { quint64 id = LObjects::override_id(unique, 292); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 292, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkDiskCache::cacheSize(); } return ret; }
    QNetworkCacheMetaData metaData(const QUrl& x1) { quint64 id = LObjects::override_id(unique, 293); void* fun = LObjects::overrideFun(id); QNetworkCacheMetaData ret; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 293, args, id).value<QNetworkCacheMetaData>(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkDiskCache::metaData(x1); } return ret; }
    bool remove(const QUrl& x1) { quint64 id = LObjects::override_id(unique, 294); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 294, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkDiskCache::remove(x1); } return ret; }
    void updateMetaData(const QNetworkCacheMetaData& x1) { quint64 id = LObjects::override_id(unique, 295); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 295, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QNetworkDiskCache::updateMetaData(x1); }}
    bool eventFilter(QObject* x1, QEvent* x2) { quint64 id = LObjects::override_id(unique, 5); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QNetworkDiskCache::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { quint64 id = LObjects::override_id(unique, 6); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QNetworkDiskCache::childEvent(x1); }}
    void customEvent(QEvent* x1) { quint64 id = LObjects::override_id(unique, 7); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QNetworkDiskCache::customEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { quint64 id = LObjects::override_id(unique, 8); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QNetworkDiskCache::timerEvent(x1); }}
};

class LTcpServer : public QTcpServer {
    Q_OBJECT
    friend class Q187;
public:
    LTcpServer(uint u, QObject* x1 = 0) : QTcpServer(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    bool hasPendingConnections() const { quint64 id = LObjects::override_id(unique, 278); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 278, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpServer::hasPendingConnections(); } return ret; }
    QTcpSocket* nextPendingConnection() { quint64 id = LObjects::override_id(unique, 279); void* fun = LObjects::overrideFun(id); QTcpSocket* ret = 0; if(fun && (LObjects::calling != id)) { ret = (QTcpSocket*)callOverrideFun(fun, 279, 0, id).value<void*>(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpServer::nextPendingConnection(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { quint64 id = LObjects::override_id(unique, 5); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpServer::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { quint64 id = LObjects::override_id(unique, 6); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QTcpServer::childEvent(x1); }}
    void customEvent(QEvent* x1) { quint64 id = LObjects::override_id(unique, 7); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QTcpServer::customEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { quint64 id = LObjects::override_id(unique, 8); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QTcpServer::timerEvent(x1); }}
};

class LTcpSocket : public QTcpSocket {
    Q_OBJECT
    friend class Q188;
public:
    LTcpSocket(uint u, QObject* x1 = 0) : QTcpSocket(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void connectToHost(const QString& x1, quint16 x2, OpenMode x3 = ReadWrite, NetworkLayerProtocol x4 = AnyIPProtocol) { quint64 id = LObjects::override_id(unique, 117); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 117, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QTcpSocket::connectToHost(x1, x2, x3, x4); }}
    void disconnectFromHost() { quint64 id = LObjects::override_id(unique, 119); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { callOverrideFun(fun, 119, 0, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QTcpSocket::disconnectFromHost(); }}
    void resume() { quint64 id = LObjects::override_id(unique, 120); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { callOverrideFun(fun, 120, 0, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QTcpSocket::resume(); }}
    void setReadBufferSize(qint64 x1) { quint64 id = LObjects::override_id(unique, 121); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 121, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QTcpSocket::setReadBufferSize(x1); }}
    void setSocketOption(QAbstractSocket::SocketOption x1, const QVariant& x2) { quint64 id = LObjects::override_id(unique, 122); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 122, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QTcpSocket::setSocketOption(x1, x2); }}
    QVariant socketOption(QAbstractSocket::SocketOption x1) { quint64 id = LObjects::override_id(unique, 123); void* fun = LObjects::overrideFun(id); QVariant ret; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 123, args, id).value<QVariant>(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::socketOption(x1); } return ret; }
    bool waitForConnected(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 124); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 124, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::waitForConnected(x1); } return ret; }
    bool waitForDisconnected(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 125); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 125, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::waitForDisconnected(x1); } return ret; }
    bool atEnd() const { quint64 id = LObjects::override_id(unique, 126); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 126, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::atEnd(); } return ret; }
    qlonglong bytesAvailable() const { quint64 id = LObjects::override_id(unique, 127); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 127, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::bytesAvailable(); } return ret; }
    qlonglong bytesToWrite() const { quint64 id = LObjects::override_id(unique, 128); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 128, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::bytesToWrite(); } return ret; }
    bool canReadLine() const { quint64 id = LObjects::override_id(unique, 129); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 129, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::canReadLine(); } return ret; }
    void close() { quint64 id = LObjects::override_id(unique, 130); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { callOverrideFun(fun, 130, 0, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QTcpSocket::close(); }}
    bool isSequential() const { quint64 id = LObjects::override_id(unique, 131); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 131, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::isSequential(); } return ret; }
    bool waitForBytesWritten(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 132); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 132, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::waitForBytesWritten(x1); } return ret; }
    bool waitForReadyRead(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 133); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 133, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::waitForReadyRead(x1); } return ret; }
    qlonglong readData(char* x1, qint64 x2) { quint64 id = LObjects::override_id(unique, 134); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 134, args, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::readData(x1, x2); } return ret; }
    qlonglong readLineData(char* x1, qint64 x2) { quint64 id = LObjects::override_id(unique, 135); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 135, args, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::readLineData(x1, x2); } return ret; }
    qlonglong writeData(const char* x1, qint64 x2) { quint64 id = LObjects::override_id(unique, 136); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 136, args, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::writeData(x1, x2); } return ret; }
    bool open(OpenMode x1) { quint64 id = LObjects::override_id(unique, 137); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 137, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::open(x1); } return ret; }
    qlonglong pos() const { quint64 id = LObjects::override_id(unique, 138); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 138, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::pos(); } return ret; }
    bool reset() { quint64 id = LObjects::override_id(unique, 139); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 139, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::reset(); } return ret; }
    bool seek(qint64 x1) { quint64 id = LObjects::override_id(unique, 140); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 140, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::seek(x1); } return ret; }
    qlonglong size() const { quint64 id = LObjects::override_id(unique, 141); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 141, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::size(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { quint64 id = LObjects::override_id(unique, 5); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QTcpSocket::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { quint64 id = LObjects::override_id(unique, 6); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QTcpSocket::childEvent(x1); }}
    void customEvent(QEvent* x1) { quint64 id = LObjects::override_id(unique, 7); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QTcpSocket::customEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { quint64 id = LObjects::override_id(unique, 8); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QTcpSocket::timerEvent(x1); }}
};

class LUdpSocket : public QUdpSocket {
    Q_OBJECT
    friend class Q206;
public:
    LUdpSocket(uint u, QObject* x1 = 0) : QUdpSocket(x1), unique(u) {}

    static NumList overrideIds;
    uint unique;

    void connectToHost(const QString& x1, quint16 x2, OpenMode x3 = ReadWrite, NetworkLayerProtocol x4 = AnyIPProtocol) { quint64 id = LObjects::override_id(unique, 117); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2, &x3, &x4 }; callOverrideFun(fun, 117, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QUdpSocket::connectToHost(x1, x2, x3, x4); }}
    void disconnectFromHost() { quint64 id = LObjects::override_id(unique, 119); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { callOverrideFun(fun, 119, 0, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QUdpSocket::disconnectFromHost(); }}
    void resume() { quint64 id = LObjects::override_id(unique, 120); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { callOverrideFun(fun, 120, 0, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QUdpSocket::resume(); }}
    void setReadBufferSize(qint64 x1) { quint64 id = LObjects::override_id(unique, 121); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 121, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QUdpSocket::setReadBufferSize(x1); }}
    void setSocketOption(QAbstractSocket::SocketOption x1, const QVariant& x2) { quint64 id = LObjects::override_id(unique, 122); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; callOverrideFun(fun, 122, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QUdpSocket::setSocketOption(x1, x2); }}
    QVariant socketOption(QAbstractSocket::SocketOption x1) { quint64 id = LObjects::override_id(unique, 123); void* fun = LObjects::overrideFun(id); QVariant ret; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 123, args, id).value<QVariant>(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::socketOption(x1); } return ret; }
    bool waitForConnected(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 124); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 124, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::waitForConnected(x1); } return ret; }
    bool waitForDisconnected(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 125); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 125, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::waitForDisconnected(x1); } return ret; }
    bool atEnd() const { quint64 id = LObjects::override_id(unique, 126); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 126, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::atEnd(); } return ret; }
    qlonglong bytesAvailable() const { quint64 id = LObjects::override_id(unique, 127); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 127, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::bytesAvailable(); } return ret; }
    qlonglong bytesToWrite() const { quint64 id = LObjects::override_id(unique, 128); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 128, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::bytesToWrite(); } return ret; }
    bool canReadLine() const { quint64 id = LObjects::override_id(unique, 129); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 129, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::canReadLine(); } return ret; }
    void close() { quint64 id = LObjects::override_id(unique, 130); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { callOverrideFun(fun, 130, 0, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QUdpSocket::close(); }}
    bool isSequential() const { quint64 id = LObjects::override_id(unique, 131); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 131, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::isSequential(); } return ret; }
    bool waitForBytesWritten(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 132); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 132, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::waitForBytesWritten(x1); } return ret; }
    bool waitForReadyRead(int x1 = 30000) { quint64 id = LObjects::override_id(unique, 133); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 133, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::waitForReadyRead(x1); } return ret; }
    qlonglong readData(char* x1, qint64 x2) { quint64 id = LObjects::override_id(unique, 134); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 134, args, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::readData(x1, x2); } return ret; }
    qlonglong readLineData(char* x1, qint64 x2) { quint64 id = LObjects::override_id(unique, 135); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 135, args, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::readLineData(x1, x2); } return ret; }
    qlonglong writeData(const char* x1, qint64 x2) { quint64 id = LObjects::override_id(unique, 136); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 136, args, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::writeData(x1, x2); } return ret; }
    bool open(OpenMode x1) { quint64 id = LObjects::override_id(unique, 137); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 137, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::open(x1); } return ret; }
    qlonglong pos() const { quint64 id = LObjects::override_id(unique, 138); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 138, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::pos(); } return ret; }
    bool reset() { quint64 id = LObjects::override_id(unique, 139); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 139, 0, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::reset(); } return ret; }
    bool seek(qint64 x1) { quint64 id = LObjects::override_id(unique, 140); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; ret = callOverrideFun(fun, 140, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::seek(x1); } return ret; }
    qlonglong size() const { quint64 id = LObjects::override_id(unique, 141); void* fun = LObjects::overrideFun(id); qlonglong ret = 0; if(fun && (LObjects::calling != id)) { ret = callOverrideFun(fun, 141, 0, id).toLongLong(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::size(); } return ret; }
    bool eventFilter(QObject* x1, QEvent* x2) { quint64 id = LObjects::override_id(unique, 5); void* fun = LObjects::overrideFun(id); bool ret = false; if(fun && (LObjects::calling != id)) { const void* args[] = { &x1, &x2 }; ret = callOverrideFun(fun, 5, args, id).toBool(); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { ret = QUdpSocket::eventFilter(x1, x2); } return ret; }
    void childEvent(QChildEvent* x1) { quint64 id = LObjects::override_id(unique, 6); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 6, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QUdpSocket::childEvent(x1); }}
    void customEvent(QEvent* x1) { quint64 id = LObjects::override_id(unique, 7); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 7, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QUdpSocket::customEvent(x1); }}
    void timerEvent(QTimerEvent* x1) { quint64 id = LObjects::override_id(unique, 8); void* fun = LObjects::overrideFun(id); if(fun && (LObjects::calling != id)) { const void* args[] = { &x1 }; callOverrideFun(fun, 8, args, id); } if(!fun || LObjects::call_default || (LObjects::calling == id)) { QUdpSocket::timerEvent(x1); }}
};

QT_END_NAMESPACE

#endif
